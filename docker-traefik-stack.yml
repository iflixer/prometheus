version: '3.7'

volumes:
    prometheus_data: {}
    grafana_data: {}

networks:
#  monitor-net:
#    driver: overlay
#    name: inbound
  dle-network:
      external: true


services:

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - dle-network     
    deploy:
      placement:
        constraints:
          - node.role==manager
      labels:
          - "traefik.enable=true"
          - "traefik.http.routers.prom_testme_cloud.rule=Host(`prom.testme.cloud`)"
          - "traefik.http.services.prom_testme_cloud.loadbalancer.server.port=9090"
          - "traefik.http.routers.prom_testme_cloud.middlewares=prom_testme_cloud_auth"
          - "traefik.http.middlewares.prom_testme_cloud_auth.basicauth.users=admin:$$apr1$$C4Em0CWO$$5mfCP1W2vZnm98gEdWjwY/"
          - "traefik.docker.network=dle-network"
          #- "traefik.frontend.rule=Host:prom.testme.cloud"
          #- "traefik.backend=prometheus"
          #- "traefik.port=9090"
      restart_policy:
        condition: on-failure

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    networks:
      - dle-network
    deploy:
      mode: global
      restart_policy:
        condition: on-failure

  alertmanager:
    image: prom/alertmanager
    ports:
      - 9093:9093
    volumes:
      - "./alertmanager/:/etc/alertmanager/"
    networks:
      - dle-network
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    deploy:
      placement:
        constraints:
           - node.role==manager
      restart_policy:
        condition: on-failure    

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8088:8080
    networks:
      - dle-network
    deploy:
      mode: global
      restart_policy:
        condition: on-failure

  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    networks:
      - dle-network
    user: "472"
    deploy:
      placement:
        constraints:
          - node.role==manager
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.grafana_testme_cloud.rule=Host(`grafana.testme.cloud`)"
        - "traefik.http.services.grafana_testme_cloud.loadbalancer.server.port=3000"
#        - "traefik.http.routers.grafana_testme_cloud.middlewares=grafana_testme_cloud_auth"
#        - "traefik.http.middlewares.grafana_testme_cloud_auth.basicauth.users=admin:$$apr1$$C4Em0CWO$$5mfCP1W2vZnm98gEdWjwY/"
        - "traefik.docker.network=dle-network"
        #- "traefik.frontend.rule=Host:grafana.testme.cloud"
        #- "traefik.backend=grafana"
        #- "traefik.port=3000"
#        - "traefik.docker.network=dle-network"
      restart_policy:
        condition: on-failure
